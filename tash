warning: in the working copy of 'src/components/Dashboard.tsx', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/src/components/Dashboard.tsx b/src/components/Dashboard.tsx[m
[1mindex 5d97175..2bbd5e1 100644[m
[1m--- a/src/components/Dashboard.tsx[m
[1m+++ b/src/components/Dashboard.tsx[m
[36m@@ -5,7 +5,6 @@[m [mimport { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";[m
 import { Badge } from "@/components/ui/badge";[m
 import { Alert, AlertDescription } from "@/components/ui/alert";[m
 import { Play, Phone, Clock, Activity, AlertTriangle, Wifi, WifiOff } from "lucide-react";[m
[31m-import { LiveTranscript } from "./LiveTranscript";[m
 [m
 interface CallData {[m
   id: string;[m
[36m@@ -33,7 +32,7 @@[m [minterface TranscriptData {[m
   confidence: number;[m
 }[m
 [m
[31m-// Real-time Audio Waveform Component (matches HTML demo functionality)[m
[32m+[m[32m// Enhanced Audio Waveform Component matching HTML styling[m
 function RealTimeAudioWaveform({ amplitude = 0, isActive = false }: { amplitude?: number; isActive?: boolean }) {[m
   const [animatedHeights, setAnimatedHeights] = useState([20, 20, 20, 20, 20]);[m
 [m
[36m@@ -45,7 +44,6 @@[m [mfunction RealTimeAudioWaveform({ amplitude = 0, isActive = false }: { amplitude?[m
 [m
     const interval = setInterval(() => {[m
       setAnimatedHeights(prev => prev.map((_, index) => {[m
[31m-        // Use amplitude to influence bar heights, with some randomness[m
         const baseHeight = Math.max(20, amplitude * 60 * (0.5 + Math.random() * 0.5));[m
         return Math.min(60, baseHeight);[m
       }));[m
[36m@@ -56,22 +54,21 @@[m [mfunction RealTimeAudioWaveform({ amplitude = 0, isActive = false }: { amplitude?[m
 [m
   if (!isActive) {[m
     return ([m
[31m-      <div className="bg-muted rounded-lg p-3 h-20 flex items-center justify-center">[m
[31m-        <span className="text-muted-foreground text-sm">No audio data</span>[m
[32m+[m[32m      <div className="audio-visualizer">[m
[32m+[m[32m        <div className="no-audio-data">No audio data</div>[m
       </div>[m
     );[m
   }[m
 [m
   return ([m
[31m-    <div className="bg-muted rounded-lg p-3">[m
[31m-      <div className="flex items-end justify-center h-16 gap-1">[m
[32m+[m[32m    <div className="audio-visualizer">[m
[32m+[m[32m      <div className="audio-bars">[m
         {animatedHeights.map((height, index) => ([m
           <div[m
             key={index}[m
[31m-            className="bg-primary rounded-sm transition-all duration-150 ease-out w-1"[m
[32m+[m[32m            className="audio-bar"[m
             style={{[m
               height: `${height}px`,[m
[31m-              opacity: 0.7 + (height / 60) * 0.3,[m
               animationDelay: `${index * 0.1}s`[m
             }}[m
           />[m
[36m@@ -81,6 +78,81 @@[m [mfunction RealTimeAudioWaveform({ amplitude = 0, isActive = false }: { amplitude?[m
   );[m
 }[m
 [m
[32m+[m[32m// Enhanced Live Transcript Component matching HTML styling[m
[32m+[m[32mfunction LiveTranscript({ transcript, isActive }: { transcript: string[]; isActive: boolean }) {[m
[32m+[m[32m  const containerRef = useRef<HTMLDivElement>(null);[m
[32m+[m[32m  const [lastTranscriptIndex, setLastTranscriptIndex] = useState(0);[m
[32m+[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    if (transcript.length > lastTranscriptIndex) {[m
[32m+[m[32m      setLastTranscriptIndex(transcript.length);[m
[32m+[m[32m      // Auto-scroll to bottom[m
[32m+[m[32m      if (containerRef.current) {[m
[32m+[m[32m        containerRef.current.scrollTop = containerRef.current.scrollHeight;[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m[32m  }, [transcript, lastTranscriptIndex]);[m
[32m+[m
[32m+[m[32m  if (transcript.length === 0) {[m
[32m+[m[32m    return ([m
[32m+[m[32m      <div className="transcript-container" ref={containerRef}>[m
[32m+[m[32m        <div className="no-transcript-data">No transcripts yet</div>[m
[32m+[m[32m      </div>[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  const parseTranscriptEntry = (entry: string, index: number) => {[m
[32m+[m[32m    // Handle call ended entries[m
[32m+[m[32m    if (entry === "--- Call Ended ---") {[m
[32m+[m[32m      return {[m
[32m+[m[32m        speaker: "System",[m
[32m+[m[32m        text: entry,[m
[32m+[m[32m        time: new Date().toLocaleTimeString(),[m
[32m+[m[32m        isCallEnd: true[m
[32m+[m[32m      };[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Parse "Speaker: Text" format[m
[32m+[m[32m    const match = entry.match(/^([^:]+):\s*(.*)$/);[m
[32m+[m[32m    if (match) {[m
[32m+[m[32m      return {[m
[32m+[m[32m        speaker: match[1],[m
[32m+[m[32m        text: match[2],[m
[32m+[m[32m        time: new Date().toLocaleTimeString(),[m
[32m+[m[32m        isCallEnd: false[m
[32m+[m[32m      };[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Fallback for entries without speaker[m
[32m+[m[32m    return {[m
[32m+[m[32m      speaker: "Unknown",[m
[32m+[m[32m      text: entry,[m
[32m+[m[32m      time: new Date().toLocaleTimeString(),[m
[32m+[m[32m      isCallEnd: false[m
[32m+[m[32m    };[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  return ([m
[32m+[m[32m    <div className="transcript-container" ref={containerRef}>[m
[32m+[m[32m      {transcript.map((entry, index) => {[m
[32m+[m[32m        const parsed = parseTranscriptEntry(entry, index);[m
[32m+[m[32m        const isLatest = index === transcript.length - 1 && isActive;[m
[32m+[m[41m        [m
[32m+[m[32m        return ([m
[32m+[m[32m          <div[m[41m [m
[32m+[m[32m            key={index}[m[41m [m
[32m+[m[32m            className={`transcript-entry ${isLatest ? 'growing' : ''} ${parsed.isCallEnd ? 'call-end' : ''}`}[m
[32m+[m[32m          >[m
[32m+[m[32m            <div className="transcript-speaker">{parsed.speaker}</div>[m
[32m+[m[32m            <div className="transcript-text">{parsed.text}</div>[m
[32m+[m[32m            <div className="transcript-time">{parsed.time}</div>[m
[32m+[m[32m          </div>[m
[32m+[m[32m        );[m
[32m+[m[32m      })}[m
[32m+[m[32m    </div>[m
[32m+[m[32m  );[m
[32m+[m[32m}[m
[32m+[m
 const DEMO_CALLS: CallData[] = [[m
   {[m
     id: "4",[m
[36m@@ -144,7 +216,6 @@[m [mexport function Dashboard() {[m
         console.log('Connected to WebSocket');[m
         setIsConnected(true);[m
         setConnectionStatus("connected");[m
[31m-        // Don't create a call here - wait for actual audio/transcript data[m
       };[m
 [m
       ws.current.onmessage = (event) => {[m
[36m@@ -162,7 +233,6 @@[m [mexport function Dashboard() {[m
         setConnectionStatus("disconnected");[m
         hasActiveCall.current = false;[m
         [m
[31m-        // Mark current call as inactive if exists[m
         if (currentCall.current) {[m
           setLiveCalls(prev => prev.map(call => [m
             call.id === currentCall.current?.id [m
[36m@@ -171,7 +241,6 @@[m [mexport function Dashboard() {[m
           ));[m
         }[m
         [m
[31m-        // Auto-reconnect if still monitoring[m
         if (demoActive) {[m
           setTimeout(() => {[m
             connectWebSocket();[m
[36m@@ -199,7 +268,7 @@[m [mexport function Dashboard() {[m
     for (let i = 0; i < audioArray.length; i++) {[m
       sum += Math.abs(audioArray[i]);[m
     }[m
[31m-    return sum / audioArray.length / 32768; // Normalize to 0-1[m
[32m+[m[32m    return sum / audioArray.length / 32768;[m
   };[m
 [m
   const createCallIfNeeded = (): CallData => {[m
[36m@@ -229,10 +298,7 @@[m [mexport function Dashboard() {[m
     switch (message.type) {[m
       case 'audio':[m
         if (message.data && message.data.length > 0) {[m
[31m-          // Create call on first audio data (indicates active call)[m
           const call = c